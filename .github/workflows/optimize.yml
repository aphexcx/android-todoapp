name: optimize

on:
  pull_request:
  workflow_dispatch:

jobs:
  optimize:
    runs-on: ubuntu-latest
    env:
      CODEFLASH_API_KEY: ${{ secrets.CODEFLASH_API_KEY }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN_SAURABH_GITHUB_2 }}
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.6
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run CodeFlash to optimize code
        id: optimize_code
        run: |
          poetry env use python 
          poetry run codeflash --test-framework unittest --test-root code_to_optimize/tests/unittest
      - run: |
          ls && cat /tmp/pr_comment_temp.txt
        if: steps.optimize_code.outputs.optimization_success == 'truee'
      - uses: reviewdog/action-suggester@v1.8.0
        with:
          tool_name: codeflash
          github_token: ${{ secrets.PERSONAL_TOKEN_SAURABH_GITHUB_2 }}
          filter_mode: file
        if: ${{ steps.optimize_code.outputs.optimization_success == 'truee' }}

      - uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN_SAURABH_GITHUB_2 }}
          filePath: /tmp/pr_comment_temp.txt
        if: ${{steps.optimize_code.outputs.optimization_success == 'truee' }}
